# -*- coding: utf-8 -*-
"""
Created on Mon Jul 26 13:39:30 2021

@author: Tim
"""

import glob
import re
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

def text_retrieve_list(file, retriever, value_name):
    
    with open(file, 'r') as f:
        text = f.read()
    
    text_obj = retriever.search(text)
    text_list = text_obj.group(value_name).split()
    text_array = np.array([text_list])
            
    return text_array

def array_sorter(data_array):
    df_ref = pd.DataFrame(data = data_array[1:, 1:], 
                          index = data_array[1:, 0],
                          columns = data_array[0, 1:].astype(int))
    
    df_ref = df_ref.sort_index()
    df_ref = df_ref.T.sort_index()
    
    array_thresh = np.array([['Coincidences-Indices']])
    array_thresh = np.append(array_thresh,np.array([list(df_ref.axes[0])]),
                             axis = 1)
    
    array_index = np.array([list(df_ref.axes[1])])
    
    data = df_ref.T.to_numpy()
    
    data = np.concatenate((array_index.T, data), axis = 1)
    data = np.concatenate((array_thresh, data), axis = 0)
    
    return data

def div_calc( data_array, ref_array, div_type = 'Absolute', use_ref = 'approved'):
    
    data = data_array[1:, 1:].astype(float)
    
    data_thresh = np.array([data_array[0, 1:]])
    data_index = np.array([data_array[:, 0]])
    
    if use_ref == 'approved' :
        ref = ref_array[1:, 1:].astype(float)
        
    elif use_ref == 'zero' :
        ref = ref_array
        
    else:
        print('use_ref must be approved or zero')
    
    if div_type == 'Absolute' :
        diff = data - ref
        
    elif div_type == 'Relative' :
        diff = 1 - (1-data)/(1-ref)
        
    else:
        pass
    
        
    div_data = 1/(1 + np.exp(diff))
    
    div_data = np.concatenate((data_thresh, div_data), axis = 0)
    
    div_data = np.concatenate((data_index.T, div_data), axis = 1)
    
    return div_data

div_type = 'Relative'
use_ref = 'approved'
org_files = glob.glob('*.npy')
w_type = 'nw'
indices_of_interest = ['BUB', 'Fai', 'JT', 'SM']
index_list_re = re.compile(r'^Index \s+(?P<ind_list>.+)', re.MULTILINE) 
sim_re = re.compile(r"^Similarity \s+(?P<sims>.+)", re.MULTILINE)

fig = plt.Figure()
plt.xlabel('Threshold Percentage')
plt.tight_layout()

for file in org_files:
    data_source = file.split('_')[0]
    extra_info = file.split('_')[1]
    fingerprint = file.split('_')[-1].split('.')[0]
    data_files = glob.glob(data_source+'_'+extra_info+'*'+fingerprint+'_'+w_type+'.sim')
    if use_ref == 'approved' :
        ref_files = glob.glob('Approved_fingerprints*'+fingerprint+'_'+w_type+'.sim')
        for ref in ref_files:
            if ref == ref_files[0]:
                ref_thresh = ['Index-Threshold']
                ref_array = text_retrieve_list(ref, index_list_re, 'ind_list')
            else:
                pass
            ref_thresh.append(int(ref.split('_')[-3].split('-')[-1]))
            ref_similarities = text_retrieve_list(ref, sim_re, 'sims')
            ref_array = np.append(ref_array, ref_similarities, axis = 0)
            
        ref_thresh = np.array([ref_thresh])
        ref_array = ref_array.T
        ref_array = np.append(ref_thresh, ref_array, axis = 0)
        ref_array = array_sorter(ref_array)
        print(ref_array)
        
    elif use_ref == 'zero' :
        ref_array = 0
        
    else:
        pass
    
    for data in data_files:
        if data == data_files[0]:
            data_array = text_retrieve_list(data, index_list_re, 'ind_list')
            thresholds = ['Index-Threshold']
        else:
            pass
        thresholds.append(int(data.split('_')[-3].split('-')[-1]))
        data_similarities = text_retrieve_list(data, sim_re, 'sims')
        data_array = np.append(data_array, data_similarities, axis = 0)
    
    thresholds = np.array([thresholds])
    data_array = data_array.T
    data_array = np.append(thresholds, data_array, axis = 0)
    data_array = array_sorter(data_array)
    
    div_array = div_calc(data_array = data_array, ref_array = ref_array, 
                 div_type = div_type, use_ref = use_ref)
    
      
    
    #Diversity Plots
    plt.ylim([0, 1])
    plt.xlim([0, int(div_array[0, -1])])
    plt.title(data_source + '  ' + extra_info + '  ' + fingerprint + '  ' + w_type + 'ref = '+ use_ref)
    plt.ylabel(div_type+' Diversity')
    
    for index in range(np.shape(div_array)[0]):
        if index != 0:
            if div_array[index][0] in indices_of_interest:
                plt.scatter(div_array[0][1:].astype(float), div_array[index][1:].astype(float),
                            label = div_array[index][0])
        
        else:
            pass

    
    plt.legend(loc = 'center left', bbox_to_anchor = (1.0, 0.5))                
    plt.plot(div_array[0][1:].astype(float), [0.5]*(np.shape(div_array)[1] - 1), 'b')
    plt.savefig(data_source + '_' + extra_info + '_' + fingerprint + '_' + 
                w_type +'_' + 'ref='+ use_ref+'_'+div_type+'_plot.png', bbox_inches = 'tight')
    plt.clf()
    
    #Diversities
